#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#include <signal.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <mraa/gpio.h>
#include <mraa/aio.h>
#include <signal.h>
#include <math.h>
#include <time.h>

// globals
int fd; 
sig_atomic_t volatile run = 1; 
const int B = 4275; 
const int R0 = 100; 

void interruptFunc()
{
	printf("wassup button\n"); 
}

int main(int argc, char** argv)
{
    // beaglebone varialbes
    float tempValue; 
	float R, temperature; 
    // beaglebone stuff
    mraa_aio_context temp; 
    mraa_gpio_context button;
    mraa_init(); 
    temp = mraa_aio_init(1);
    button = mraa_gpio_init(60); 
	mraa_gpio_dir(button, MRAA_GPIO_IN); 
    mraa_gpio_isr(button, MRAA_GPIO_EDGE_RISING, &interruptFunc, NULL);
	

    // getopt variables
    int c; 
    int structIndex; 
    int periodBool = 0; 
    int scaleBool = 0; 
    int period = 1; 
    int cBool = 0; 
    int fBool = 1; 
    //{const char *name; int has_arg; int *flag; int val;}
    static struct option options[] = {
        {"period", required_argument, NULL, 1}, 
        {"scale", required_argument, NULL, 2}, 
        {"log", required_argument, NULL, 3},
        {0,0,0,0}
    };
    
    while ((c = getopt_long(argc, argv, "", options, &structIndex))!=-1)
    {
        //returns val, the single char, if flag is null 
        //optarg holds the string argument 
        switch (c) {
            case 1: 
                periodBool = 1; 
                period = atoi(optarg); 
                break; 
            case 2: 
                scaleBool = 1; 
                if (optarg[0]== 'C' && optarg[1] == '\0')
                {
                    cBool = 1; 
                    fBool = 0; 
                }
                else if (optarg[0] == 'F' && optarg[1] == '\0')
                {
                    cBool = 0; 
                    fBool = 1; 
                }
                else
                {
                    printf("--scale only accepts --scale=C or --scale=F\n"); 
                }
                
                break; 
            case 3: 
                // int fd; 
                fd = open(optarg, O_CREAT | O_WRONLY, 0666); 
                if (fd == -1)
                {
                    fprintf(stderr, "Error with argument --log, file %s, due to: %s\n", optarg, strerror(errno)); 
                    exit(3); 
                }
                close(1); 
                dup(fd); 
                close(fd);
                break; 
            default: 
                fprintf(stderr, "%s", "Incorrect or extra arguments; use --period, --scale=F or C, --log=filename\n"); 
                exit(1); 

        }//end of switch 
    }//end of while loop

    printf("period: %d\n", period); 
    printf("celsius? %d\n", cBool); 
    printf("farenheit? %d\n", fBool); 
    write(1, "chiekcn nuggs\n", 15); 

    while(run)
	{
		write(1, "hi\n", 3); 
		sleep(1);
        // time
        time_t rawtime;
        struct tm *timeStruct;
        time(&rawtime); 
        timeStruct = localtime(&rawtime);
        int hour = timeStruct->tm_hour; 
        int min = timeStruct->tm_min; 
        int sec = timeStruct->tm_sec; 
        if (sec<10)
            printf("%i:%i:0%i", hour, min, sec); 
        else
        {
            printf("%i:%i:%i", hour, min, sec); 
        }
        
        tempValue = mraa_aio_read(temp);
        R = 1023.0/((float)tempValue)-1.0; 
        R = 100000.0*R; 
        //float temp = log(R/100000.0); 
        temperature = 1.0/(log(R/100000.0)/B+1/298.15)-273.15; 
        if (cBool == 1)
            printf(" %0.1f\n", temperature);
        else
        {
            temperature = temperature*1.8000+32.00; 
            printf(" %0.1f\n", temperature);
        }
        sleep(1); 
	}// end of while loop

    // gotta figure out polling
    // so my plan is to read stdin char by char until i hit a newline
    // once newline is hit, copy buffer into another analyze buffer and 
    // clear original buffer
    // then do some if statements on analyze buffer to check if it is 
    // a command and handle the command
    // keep it goin 
    char collect[256]; 
    bzero(collect, 256); 
    int collectIndex = 0; 
    char analyze[256]; 
    bzero(collect, 256); 
    while(1)
    {
        char c; 
        read(0, &c, 1); 
        collect[collectIndex] = c; 
        collectIndex++; 
        if (c == '\n')
        {
            memcpy(analyze, collect, collectIndex); 
            bzero(collect, 256); 
            collectIndex = 0; 
            if (strcmp(analyze, "SCALE=F\n"))
            
        }
    }

	mraa_gpio_close(button); 
    exit(0); 
}
