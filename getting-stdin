#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#include <signal.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>

#include <signal.h>
#include <math.h>
#include <time.h>

int main(int argc, char** argv)
{
    char collect[256]; 
    bzero(collect, 256); 
    int collectIndex = 0; 
    char analyze[256]; 
    bzero(analyze, 256); 
    int analyzeSize = 0; 
    while(1)
    {
        char c; 
        read(0, &c, 1); 
        collect[collectIndex] = c; 
        collectIndex++; 
        if (c == '\n')
        {
            memcpy(analyze, collect, collectIndex); 
            bzero(collect, 256); 
            analyzeSize = collectIndex; 
            collectIndex = 0; 
            if (strcmp(analyze, "SCALE=F\n") == 0)
                printf("fBool 1\n"); 
            else if (strcmp(analyze, "SCALE=C\n") == 0)
                printf("cBool 1\n"); 
            else if (analyze[0] == 'P' && analyze[1] == 'E' && analyze[2] == 'R'
            && analyze[3] == 'I' && analyze[4] == 'O' && analyze[5] == 'D' && analyze[6] == '=')
            {
                printf("period. \n"); 
                char intBuff[256]; 
                bzero(intBuff, 256); 
                int intBuffIndex = 0; 
                for (int i = 7; i < analyzeSize; i++)
                {
                    intBuff[intBuffIndex] = analyze[i]; 
                    intBuffIndex++; 
                }
                printf("this is amt: %i \n", atoi(intBuff)); 
                bzero(intBuff, 256); 
                intBuffIndex = 0;
            }
            else if(strcmp(analyze, "START\n") == 0)
            {
                printf("modify start bool\n"); 
            }
            else if(strcmp(analyze, "STOP\n") == 0)
            {
                printf("HUHUH\n"); 
            }
            else if(strcmp(analyze, "OFF\n") == 0)
            {
                printf("tim nN xy\n");
                exit(0);  
            }

            // write to output 
            printf("%s", analyze); 
            bzero(analyze, 256); 
            // write(1, analyze, ); 
        }
    }
 exit(0); 
}
